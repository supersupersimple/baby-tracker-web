// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User table - records website users
model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  name          String?
  image         String?
  emailVerified DateTime?
  
  // OAuth provider info
  accounts Account[]
  sessions Session[]
  
  // Relations
  ownedBabies   Baby[]     @relation("BabyOwner")
  activities    Activity[]
  babyAccess    BabyAccess[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// OAuth accounts table (for NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// User sessions table (for NextAuth.js)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Email verification tokens (for NextAuth.js)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Baby table - records baby info and which user created this baby
model Baby {
  id          Int      @id @default(autoincrement())
  ownerId     Int      @map("owner_id")
  babyName    String   @map("baby_name")
  gender      String   // 'GIRL', 'BOY', 'OTHER'
  birthday    DateTime
  description String?  // Optional description
  avatar      String?  // Optional avatar/photo URL
  isPublic    Boolean  @default(false) // Public babies can be found by invite code
  inviteCode  String?  @unique // Unique code for sharing
  
  // Relations
  owner       User         @relation("BabyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  activities  Activity[]
  babyAccess  BabyAccess[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("babies")
}

// Baby access permissions - controls who can access which babies
model BabyAccess {
  id         Int        @id @default(autoincrement())
  babyId     Int        @map("baby_id")
  userId     Int        @map("user_id")
  role       String     // 'ADMIN', 'EDITOR', 'VIEWER'
  canEdit    Boolean    @default(true)   // Can add/edit activities
  canView    Boolean    @default(true)   // Can view activities
  canInvite  Boolean    @default(false)  // Can invite others
  canManage  Boolean    @default(false)  // Can change baby details
  
  // Relations
  baby Baby @relation(fields: [babyId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([babyId, userId])
  @@map("baby_access")
}

// Activity table - records baby activities like feeding/sleeping
model Activity {
  id        Int       @id @default(autoincrement())
  ulid      String?   @unique // Global unique identifier for local-remote sync
  status    String    @default("active") // 'active', 'deleted' for soft delete
  babyId    Int       @map("baby_id")
  recorder  Int       // user id who recorded this activity
  type      String    // 'FEEDING', 'SLEEPING', 'DIAPERING', 'MEDICINE', etc.
  subtype   String?   // 'BOTTLE', 'MEAL', 'PEE', 'POO', 'RIGHT_BREAST', 'LEFT_BREAST', etc.
  fromDate  DateTime  @map("from_date")
  toDate    DateTime? @map("to_date")
  unit      String?   // 'MILLILITRES', 'OUNCES', 'NONE', etc.
  amount    Float?    // for feeding: 160.0 (ML), etc.
  category  String?   // 'FORMULA', 'BREAST_MILK', 'NONE', etc.
  details   String?   // free text field
  
  // Relations
  baby     Baby @relation(fields: [babyId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [recorder], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("activities")
}
